@namespace HomeAutomation.Web.Components.Pages

@page "/"
@using HomeAutomation.Database
@using HomeAutomation.Models.Database
@using HomeAutomation.Web.Services
@using LinqToDB.Async
@using MQTTnet.Packets

<PageTitle>Dashboard</PageTitle>
<MudStack>
    @if (_isRefreshing)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
    }
    <MudText Typo="Typo.h3" Style="margin: 20px 0px 0px 20px;">Nora's Room</MudText>
    <MudGrid Style="margin-left: 20px" Spacing="10" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.TemperatureStyle}; color: black")">
                <MudText><strong>Temperature</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.TemperatureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.TemperatureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.HumidityStyle}; color: black")">
                <MudText><strong>Humidity</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.HumidityString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.HumidityLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.PressureStyle}; color: black")">
                <MudText><strong>Pressure</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.PressureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.PressureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.AQIStyle}; color: black")">
                <MudText><strong>AQI</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.AQIString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.AQILastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudSpacer />
    <MudText Typo="Typo.h3" Style="margin: 0px 0px 0px 20px;">Outside</MudText>
    <MudGrid Style="margin-left: 20px" Spacing="10" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {Outside.TemperatureStyle}; color: black")">
                <MudText><strong>Temperature</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.TemperatureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.TemperatureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {Outside.HumidityStyle}; color: black")">
                <MudText><strong>Humidity</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.HumidityString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.HumidityLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {Outside.PressureStyle}; color: black")">
                <MudText><strong>Pressure</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.PressureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.PressureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {Outside.AQIStyle}; color: black")">
                <MudText><strong>AQI</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.AQIString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.AQILastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudSpacer />
    <MudText Typo="Typo.h3" Style="margin: 0px 0px 0px 20px;">System Status</MudText>
    <MudGrid Style="margin-left: 20px" Spacing="10" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {WeatherStationHeartbeat.HeartbeatStyle}; color: black")">
                <MudText><strong>Weather Station</strong></MudText>
                <MudText Typo="Typo.body2">
                    @WeatherStationHeartbeat.HeartbeatText
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {NoraRoomHeartbeat.HeartbeatStyle}; color: black")">
                <MudText><strong>Nora Room</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoomHeartbeat.HeartbeatText
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {SecuritySystemHeartbeat.HeartbeatStyle}; color: black")">
                <MudText><strong>Security System</strong></MudText>
                <MudText Typo="Typo.body2">
                    @SecuritySystemHeartbeat.HeartbeatText
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudStack>

@code {
    private EnvironmentData Outside = new();
    private EnvironmentData NoraRoom = new();
    private HeartbeatData WeatherStationHeartbeat = new();
    private HeartbeatData NoraRoomHeartbeat = new();
    private HeartbeatData SecuritySystemHeartbeat = new();

    [Inject]
    private IServiceScopeFactory ServiceScopeFactory { get; set; } = null!;

    [Inject]
    private ThemeService ThemeService { get; set; } = null!;

    private Timer _refreshTimer = null!;
    private bool _isRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDataAsync();
        _refreshTimer = new Timer(OnTimerCallback, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private void OnTimerCallback(object? state)
    {
        RefreshDataAsync().GetAwaiter().GetResult();
    }

    private async Task RefreshDataAsync()
    {
        _isRefreshing = true;
        using IServiceScope scope = ServiceScopeFactory.CreateScope();
        using HomeAutomationDb dbContext = scope.ServiceProvider.GetRequiredService<HomeAutomationDb>();
        await RefreshEnvironmentalDataAsync(dbContext);
        await RefreshHeartbeatDataAsync(dbContext);
        _isRefreshing = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RefreshEnvironmentalDataAsync(HomeAutomationDb dbContext)
    {
        SensorValue? outsideTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "17").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? outsideHumidity = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "18").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? outsidePressure = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "19").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomAQI = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "13").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "14").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomPressure = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "15").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomHumidity = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "16").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        NoraRoom = new EnvironmentData(noraRoomTemp, noraRoomHumidity, noraRoomPressure, noraRoomAQI);
        Outside = new EnvironmentData(outsideTemp, outsideHumidity, outsidePressure, null);
    }

    private async Task RefreshHeartbeatDataAsync(HomeAutomationDb dbContext)
    {
        Heartbeat? weatherHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber == "4").OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        Heartbeat? noraRoomHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber == "6").OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        Heartbeat? securityHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber == "1").OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        WeatherStationHeartbeat = new HeartbeatData(weatherHeartbeat);
        NoraRoomHeartbeat = new HeartbeatData(noraRoomHeartbeat);
        SecuritySystemHeartbeat = new HeartbeatData(securityHeartbeat);
    }
}