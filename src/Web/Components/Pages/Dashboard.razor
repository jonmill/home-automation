@namespace HomeAutomation.Web.Components.Pages

@page "/"
@inherits BasePage
@using HomeAutomation.Database
@using HomeAutomation.Models.Database
@using HomeAutomation.Models.Enums
@using HomeAutomation.Web.Services
@using LinqToDB.Async
@using MQTTnet.Packets

<PageTitle>Dashboard</PageTitle>
<MudStack Style="margin: 20px">
    @if (_isRefreshing)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
    }
    <MudText Typo="Typo.h3">Nora's Room</MudText>
    <MudGrid Spacing="10" Justify="Justify.FlexStart">
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.TemperatureStyle}; color: black")">
                <MudText><strong>Temperature</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.TemperatureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.TemperatureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.HumidityStyle}; color: black")">
                <MudText><strong>Humidity</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.HumidityString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.HumidityLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.PressureStyle}; color: black")">
                <MudText><strong>Pressure</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.PressureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.PressureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {NoraRoom.AQIStyle}; color: black")">
                <MudText><strong>AQI</strong></MudText>
                <MudText Typo="Typo.body2">
                    @NoraRoom.AQIString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @NoraRoom.AQILastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudDivider Style="margin: 30px 0px 20px 0px;" />
    <MudText Typo="Typo.h3">Outside</MudText>
    <MudGrid Spacing="10" Justify="Justify.FlexStart">
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {Outside.TemperatureStyle}; color: black")">
                <MudText><strong>Temperature</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.TemperatureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.TemperatureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {Outside.HumidityStyle}; color: black")">
                <MudText><strong>Humidity</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.HumidityString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.HumidityLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {Outside.PressureStyle}; color: black")">
                <MudText><strong>Pressure</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.PressureString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.PressureLastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="2" lg="2">
            <MudPaper Style="@($"padding: 12px; background: {Outside.AQIStyle}; color: black")">
                <MudText><strong>AQI</strong></MudText>
                <MudText Typo="Typo.body2">
                    @Outside.AQIString
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @Outside.AQILastMeasurement
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudDivider Style="margin: 30px 0px 20px 0px;" />
    <MudText Typo="Typo.h3">Security</MudText>
    <MudGrid Spacing="10" Justify="Justify.FlexStart">
        @foreach (SecurityData sensor in SecuritySensors)
        {
            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudPaper Style="@($"padding: 12px; background: {sensor.SecurityStyle}; color: black")">
                    <MudText><strong>@sensor.SensorName</strong></MudText>
                    <MudText Typo="Typo.body2">
                        @sensor.SecurityText
                    </MudText>
                    <MudSpacer />
                    <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                        @sensor.LastMeasured
                    </MudText>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
    <MudDivider Style="margin: 30px 0px 20px 0px;" />
    <MudText Typo="Typo.h3">System Status</MudText>
    <MudGrid Spacing="10" Justify="Justify.FlexStart">
        @foreach (HeartbeatData hb in Heartbeats)
        {
            <MudItem xs="12" sm="12" md="6" lg="6">
                <MudPaper Style="@($"padding: 12px; background: {hb.HeartbeatStyle}; color: black")">
                    <MudText><strong>@hb.SystemName</strong></MudText>
                    <MudText Typo="Typo.body2">
                        @hb.HeartbeatText
                    </MudText>
                    @if (hb.HasBattery)
                    {
                        <MudDivider />
                        <MudText Typo="Typo.body2">
                            Battery Level: @hb.BatteryText
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudStack>

@code {
    private EnvironmentData Outside = new();
    private EnvironmentData NoraRoom = new();
    private List<SecurityData> SecuritySensors = [];
    private List<HeartbeatData> Heartbeats = [];

    [Inject]
    private IServiceScopeFactory ServiceScopeFactory { get; set; } = null!;

    [Inject]
    private ThemeService ThemeService { get; set; } = null!;

    [Inject]
    private IJSRuntime JS { get; set; } = null!;

    private bool _isRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDataAsync();
        UserSession.OnDataUpdated += RefreshDataAsync;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("enablePush");
        }
    }

    private async Task RefreshDataAsync()
    {
        _isRefreshing = true;
        using IServiceScope scope = ServiceScopeFactory.CreateScope();
        using HomeAutomationDb dbContext = scope.ServiceProvider.GetRequiredService<HomeAutomationDb>();
        await RefreshEnvironmentalDataAsync(dbContext);
        await RefreshSecurityDataAsync(dbContext);
        await RefreshHeartbeatDataAsync(dbContext);
        _isRefreshing = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RefreshEnvironmentalDataAsync(HomeAutomationDb dbContext)
    {
        SensorValue? outsideTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "17").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? outsideHumidity = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "18").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? outsidePressure = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "19").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomAQI = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "13").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber == "14").OrderByDescending(sv
        => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomPressure = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "15").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomHumidity = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        "16").OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        NoraRoom = new EnvironmentData(noraRoomTemp, noraRoomHumidity, noraRoomPressure, noraRoomAQI);
        Outside = new EnvironmentData(outsideTemp, outsideHumidity, outsidePressure, null);
    }

    private async Task RefreshSecurityDataAsync(HomeAutomationDb dbContext)
    {
        SecuritySensors.Clear();

        List<Sensor> sensors = await dbContext.Sensors.Where(s => (s.Type == SensorTypes.Contact) && (s.IsDeleted == false))
                                                      .OrderBy(s => s.Name)
                                                      .ToListAsync();
        foreach (Sensor sensor in sensors)
        {
            SensorValue? latestValue = await dbContext.SensorValues
                .Where(sv => sv.SensorSerialNumber == sensor.SerialNumber)
                .OrderByDescending(sv => sv.Timestamp)
                .FirstOrDefaultAsync();
            SecuritySensors.Add(new SecurityData(latestValue, sensor));
        }
    }

    private async Task RefreshHeartbeatDataAsync(HomeAutomationDb dbContext)
    {
        Heartbeats.Clear();

        List<Board> boards = await dbContext.Boards.Where(b => !b.IsDeleted).OrderBy(b => b.Name).ToListAsync();
        foreach (Board board in boards)
        {
            BoardBatteryInfo? boardBatteryInfo = await dbContext.BoardBatteryInfos.Where(b => b.BoardId == board.Id).OrderByDescending(b => b.LastUpdated).FirstOrDefaultAsync();
            Heartbeat? hb = await dbContext.Heartbeats.Where(h => h.BoardSerialNumber == board.SerialNumber).OrderByDescending(h => h.Timestamp).FirstOrDefaultAsync();
            Heartbeats.Add(new HeartbeatData(board, hb, boardBatteryInfo));
        }
    }
}