@namespace HomeAutomation.Web.Components.Pages

@page "/"
@using HomeAutomation.Database
@using HomeAutomation.Models.Database
@using HomeAutomation.Web.Services
@using LinqToDB.Async

<PageTitle>Dashboard</PageTitle>
<MudStack>
    @if (_isRefreshing)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large" />
    }
    <MudGrid Style="margin: 20px" Spacing="10" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_outsideTempColor}; color: black")">
                <MudText><strong>Outside Temp</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_outsideTemp
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @_outsideTempLastRead
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_noraRoomTempColor}; color: black")">
                <MudText><strong>Nora Room Temp</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_noraRoomTemp
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2"
                    Style="margin-top: 10px;">
                    @_noraRoomTempLastRead
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_noraRoomAqiColor}; color: black")">
                <MudText><strong>Nora Room AQI</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_noraRoomAQI
                </MudText>
                <MudSpacer />
                <MudText Typo="Typo.subtitle2" Style="margin-top: 10px;">
                    @_noraRoomAQILastRead
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Style="margin: 20px" Spacing="10" Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_outsideBoardLastSeenColor}; color: black")">
                <MudText><strong>Weather Station</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_outsideBoardLastSeen
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_noraRoomBoardLastSeenColor}; color: black")">
                <MudText><strong>Nora Room</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_noraRoomBoardLastSeen
                </MudText>
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudPaper Style="@($"padding: 12px; background: {_securityBoardLastSeenColor}; color: black")">
                <MudText><strong>Security System</strong></MudText>
                <MudText Typo="Typo.body2">
                    @_securityBoardLastSeen
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudStack>

@code {

    private const string WeatherBoardSerialNumber = "4";
    private const string NoraRoomBoardSerialNumber = "6";
    private const string SecurityBoardSerialNumber = "1";
    private const string OutsideTempSensorSerialNumber = "17";
    private const string NoraRoomTempSensorSerialNumber = "14";
    private const string NoraRoomAQISensorSerialNumber = "13";
    private string _outsideTemp = "Unknown";
    private string _outsideTempColor = Colors.Blue.Lighten1;
    private string _outsideTempLastRead = "ago";
    private string _noraRoomTemp = "Unknown";
    private string _noraRoomTempColor = Colors.Green.Lighten1;
    private string _noraRoomTempLastRead = "ago";
    private string _noraRoomAQI = "Unknown";
    private string _noraRoomAqiColor = Colors.Green.Lighten1;
    private string _noraRoomAQILastRead = "ago";
    private string _outsideBoardLastSeen = "Unknown";
    private string _outsideBoardLastSeenColor = Colors.Red.Darken1;
    private string _noraRoomBoardLastSeen = "Unknown";
    private string _noraRoomBoardLastSeenColor = Colors.Red.Darken1;
    private string _securityBoardLastSeen = "Unknown";
    private string _securityBoardLastSeenColor = Colors.Red.Darken1;

    [Inject]
    private IServiceScopeFactory ServiceScopeFactory { get; set; } = null!;

    [Inject]
    private ThemeService ThemeService { get; set; } = null!;

    private Timer _refreshTimer = null!;
    private bool _isRefreshing = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDataAsync();
        _refreshTimer = new Timer(OnTimerCallback, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private void OnTimerCallback(object? state)
    {
        RefreshDataAsync().GetAwaiter().GetResult();
    }

    private async Task RefreshDataAsync()
    {
        _isRefreshing = true;
        using IServiceScope scope = ServiceScopeFactory.CreateScope();
        using HomeAutomationDb dbContext = scope.ServiceProvider.GetRequiredService<HomeAutomationDb>();
        await RefreshEnvironmentalDataAsync(dbContext);
        await RefreshHeartbeatDataAsync(dbContext);
        _isRefreshing = false;
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task RefreshEnvironmentalDataAsync(HomeAutomationDb dbContext)
    {
        SensorValue? outsideTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        OutsideTempSensorSerialNumber).OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomTemp = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        NoraRoomTempSensorSerialNumber).OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        SensorValue? noraRoomAQI = await dbContext.SensorValues.Where(sv => sv.SensorSerialNumber ==
        NoraRoomAQISensorSerialNumber).OrderByDescending(sv => sv.Timestamp).FirstOrDefaultAsync();
        DateTimeOffset now = DateTimeOffset.UtcNow;

        if (double.TryParse(outsideTemp?.Value, out double outsideTempValue))
        {
            _outsideTemp = $"{ConvertTempToF(outsideTempValue).ToString()} °F";
            _outsideTempColor = GetTemperatureStyleForValue(outsideTempValue);
            (_outsideTempLastRead, _) = GetTimeAgoString(now - outsideTemp.Timestamp);
        }
        else
        {
            _outsideTemp = "Unknown";
        }

        if (double.TryParse(noraRoomTemp?.Value, out double noraRoomTempValue))
        {
            _noraRoomTemp = $"{ConvertTempToF(noraRoomTempValue).ToString()} °F";
            _noraRoomTempColor = GetTemperatureStyleForValue(noraRoomTempValue);
            (_noraRoomTempLastRead, _) = GetTimeAgoString(now - noraRoomTemp.Timestamp);
        }
        else
        {
            _noraRoomTemp = "Unknown";
        }

        if (double.TryParse(noraRoomAQI?.Value, out double aqi))
        {
            _noraRoomAQI = Math.Round(aqi, 0).ToString();
            (_noraRoomAQILastRead, _) = GetTimeAgoString(now - noraRoomAQI.Timestamp);
            if (aqi <= 100)
            {
                _noraRoomAqiColor = Colors.Green.Darken1;
            }
            else if (aqi <= 200)
            {
                _noraRoomAqiColor = Colors.Orange.Darken1;
            }
            else
            {
                _noraRoomAqiColor = Colors.Red.Darken1;
            }
        }
        else
        {
            _noraRoomAQI = "Unknown";
            _noraRoomAqiColor = Colors.Red.Darken1;
        }
    }

    private async Task RefreshHeartbeatDataAsync(HomeAutomationDb dbContext)
    {
        Heartbeat? weatherHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber ==
        WeatherBoardSerialNumber).OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        Heartbeat? noraRoomHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber ==
        NoraRoomBoardSerialNumber).OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        Heartbeat? securityHeartbeat = await dbContext.Heartbeats.Where(hb => hb.BoardSerialNumber ==
        SecurityBoardSerialNumber).OrderByDescending(hb => hb.Timestamp).FirstOrDefaultAsync();
        SetHeartbeatLastSeen(weatherHeartbeat, ref _outsideBoardLastSeen, ref _outsideBoardLastSeenColor);
        SetHeartbeatLastSeen(noraRoomHeartbeat, ref _noraRoomBoardLastSeen, ref _noraRoomBoardLastSeenColor);
        SetHeartbeatLastSeen(securityHeartbeat, ref _securityBoardLastSeen, ref _securityBoardLastSeenColor);
    }

    private double ConvertTempToF(double celsius) => Math.Round((celsius * 9.0 / 5.0) + 32, 0);
    private string GetTemperatureStyleForValue(double temp) => temp switch
    {
        <= 32 => Colors.Blue.Darken2,
        <= 55 => Colors.Blue.Lighten2,
        <= 65 => Colors.Orange.Lighten3,
        <= 80 => Colors.Orange.Darken2,
        _ => Colors.Orange.Darken4
    };
    private (string text, string color) GetTimeAgoString(TimeSpan ago)
    {
        int minutesSince = (int)ago.TotalMinutes;
        int hoursSince = (int)ago.TotalHours;
        int daysSince = (int)ago.TotalDays;
        if (daysSince > 0)
        {
            return ($"{daysSince} day{(daysSince > 1 ? "s" : "")} ago", Colors.Red.Darken1);
        }
        else if (hoursSince > 0)
        {
            return ($"{hoursSince} hour{(hoursSince > 1 ? "s" : "")} ago", Colors.Red.Darken1);
        }
        else if (minutesSince >= 30)
        {
            return ($"{minutesSince} minute{(minutesSince > 1 ? "s" : "")} ago", Colors.Red.Darken1);
        }
        else if (minutesSince >= 2)
        {
            return ($"{minutesSince} minutes ago", Colors.Yellow.Darken1);
        }
        else if (minutesSince == 1)
        {
            return ($"{minutesSince} minute ago", Colors.Green.Darken1);
        }
        else if (minutesSince < 1)
        {
            return ("Just now", Colors.Green.Darken1);
        }
        else
        {
            return ("Unknown", Colors.Red.Darken1);
        }
    }

    private void SetHeartbeatLastSeen(Heartbeat? heartbeat, ref string lastSeen, ref string color)
    {
        if (heartbeat == null)
        {
            lastSeen = "Unknown";
            color = Colors.Red.Darken1;
        }
        else
        {
            TimeSpan timeSinceLastSeen = DateTimeOffset.UtcNow - heartbeat.Timestamp;
            if (timeSinceLastSeen.TotalMinutes <= 1)
            {
                lastSeen = "Online";
                color = Colors.Green.Darken1;
            }
            else
            {
                (lastSeen, color) = GetTimeAgoString(timeSinceLastSeen);
            }
        }
    }
}