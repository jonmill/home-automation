@namespace HomeAutomation.Web.Components.Layout
@using HomeAutomation.Web.Services
@using MudBlazor

@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" IsDarkMode="_themeService.IsDarkMode" Theme="_themeService.CurrentTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="ToggleDrawer" />
        <MudText Typo="Typo.h6">Home Automation</MudText>
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Variant="DrawerVariant.Responsive" Elevation="1" Breakpoint="Breakpoint.Md">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="p-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    private MudThemeProvider _mudThemeProvider = null!;
    [Inject]
    private ThemeService _themeService { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _themeService.ToggleTheme(await _mudThemeProvider.GetSystemDarkModeAsync());
            await _mudThemeProvider.WatchSystemDarkModeAsync(newSetting =>
            {
                _themeService.ToggleTheme(newSetting);
                StateHasChanged();
                return Task.CompletedTask;
            });
            StateHasChanged();
        }
    }
}