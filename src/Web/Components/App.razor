@namespace HomeAutomation.Web.Components

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="_content/MudBlazor/MudBlazor.min.css" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon-32x32.png" />
    <link rel="manifest" href="/manifest.json">
    <HeadOutlet @rendermode="InteractiveServer" />
    <title>Home Automation Dashboard</title>
</head>

<body>
    <Routes @rendermode="InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="@Assets["_content/MudBlazor/MudBlazor.min.js"]"></script>
    <script>
        async function urlB64ToUint8Array(b64) {
            const pad = '='.repeat((4 - b64.length % 4) % 4);
            const base64 = (b64 + pad).replace(/-/g, '+').replace(/_/g, '/');
            const raw = atob(base64);
            return Uint8Array.from([...raw].map(ch => ch.charCodeAt(0)));
        }

        function isStandalone() {
            // iOS standalone or PWA display-mode
            return window.navigator.standalone === true ||
                window.matchMedia?.('(display-mode: standalone)').matches === true;
        }

        function supportsPush() {
            return window.isSecureContext &&
                'Notification' in window &&
                'serviceWorker' in navigator &&
                'PushManager' in window;
        };

        function show(el) { el.classList.remove('hidden'); }
        function hide(el) { el.classList.add('hidden'); }

        async function updatePushUI() {
            const btn = document.getElementById('enable-push');
            const denied = document.getElementById('push-denied');
            const unsupported = document.getElementById('push-unsupported');

            hide(btn);
            hide(denied);
            hide(unsupported);

            if (!supportsPush()) {
                show(unsupported);
                return;
            }

            // iOS requires Home-Screen; if not, don’t show the button that will fail anyway
            const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) ||
                (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
            if (isIOS && !isStandalone()) {
                show(unsupported);
                return;
            }

            const perm = Notification.permission; // 'default' | 'granted' | 'denied'

            if (perm === 'denied') { show(denied); return; }

            if (perm === 'default') {
                // Not asked yet → show CTA
                show(btn);
                return;
            }

            // perm === 'granted': check if we already have a subscription
            try {
                // We can safely register the SW here; no prompt is shown at this point.
                const reg = await navigator.serviceWorker.register('/service-worker.js');
                const sw = await navigator.serviceWorker.ready;

                const existing = await sw.pushManager.getSubscription();
                if (existing) {
                    // Already subscribed → keep button hidden
                    hide(btn);
                } else {
                    // Granted but not subscribed yet → show CTA
                    show(btn);
                }
            } catch {
                show(unsupported);
            }
        }

        async function enablePush() {

            // Ask *inside* the click (required by iOS)
            const perm = await Notification.requestPermission();
            if (perm !== 'granted') {
                await updatePushUI();
                return;
            }

            // Register SW after grant (avoids iOS quirks)
            const reg = await navigator.serviceWorker.register('/service-worker.js');
            const sw = await navigator.serviceWorker.ready;

            // Reuse if present; else create
            let sub = await sw.pushManager.getSubscription();
            if (!sub) {
                sub = await sw.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: await urlB64ToUint8Array('BOFb2zZdWxnq-nmHR97L6ENV4s8KJUybWzlroniT3PYeYNo1JifG-BgdFkedkg9AkHCfzEuDwGIXJQsnvpN5uNw')
                });
            }

            // Send to backend (store by user)
            await fetch('/api/subscriptions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(sub)
            });

            // Refresh UI: button should disappear now
            await updatePushUI();
        }

        document.getElementById('enable-push').addEventListener('click', () => {
            enablePush().catch(err => {
                console.error(err);
                // Keep UI responsive even on errors
                updatePushUI();
            });
        });

        // Initialize on load
        addEventListener('DOMContentLoaded', updatePushUI);
    </script>
</body>

</html>
